//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistrationApp.DataAccess
{
  using System;
  using System.Data.Entity;
  using System.Data.Entity.Infrastructure;
  using System.Data.Entity.Core.Objects;
  using System.Linq;
  using System.Collections.Generic;

  public partial class RegistrationDBEntities : DbContext
    {
        public RegistrationDBEntities()
            : base("name=RegistrationDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Building> Buildings { get; set; }
        public virtual DbSet<ClassRoom> ClassRooms { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseProfessor> CourseProfessors { get; set; }
        public virtual DbSet<Enrollment> Enrollments { get; set; }
        public virtual DbSet<Professor> Professors { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<vw_CourseLocations> vw_CourseLocations { get; set; }
    
        public virtual int sp_CourseRegistration(Nullable<int> studentid, Nullable<int> courseid, Nullable<System.TimeSpan> starttime, string coursenumber)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            var coursenumberParameter = coursenumber != null ?
                new ObjectParameter("coursenumber", coursenumber) :
                new ObjectParameter("coursenumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CourseRegistration", studentidParameter, courseidParameter, starttimeParameter, coursenumberParameter);
        }
    
        public virtual int sp_InsertCourse(Nullable<int> crn, string title, string starttime, string endtime, string startdate, string enddate, string classdates, Nullable<int> credits)
        {
            var crnParameter = crn.HasValue ?
                new ObjectParameter("crn", crn) :
                new ObjectParameter("crn", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var starttimeParameter = starttime != null ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(string));
    
            var endtimeParameter = endtime != null ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var classdatesParameter = classdates != null ?
                new ObjectParameter("classdates", classdates) :
                new ObjectParameter("classdates", typeof(string));
    
            var creditsParameter = credits.HasValue ?
                new ObjectParameter("credits", credits) :
                new ObjectParameter("credits", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertCourse", crnParameter, titleParameter, starttimeParameter, endtimeParameter, startdateParameter, enddateParameter, classdatesParameter, creditsParameter);
        }    
  }
}
